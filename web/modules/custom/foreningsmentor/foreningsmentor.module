<?php

use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\node\Entity\Node;

/**
 * @file
 * Contains foreningsmentor.module.
 */

/**
 * Implements template_preprocess_node().
 */
function foreningsmentor_preprocess_node(&$variables) {
  $nodeType = $variables["node"]->getType();

  if ($nodeType == 'course') {
    $variables['journal_form'] = \Drupal::formBuilder()
      ->getForm(\Drupal\foreningsmentor\Form\JournalForm::class,
        $variables["node"]);
    $variables['activity_form'] = \Drupal::formBuilder()
      ->getForm(\Drupal\foreningsmentor\Form\ActivityForm::class,
        $variables["node"]);
    $variables['finish_course_form'] = \Drupal::formBuilder()
      ->getForm(\Drupal\foreningsmentor\Form\FinishCourseForm::class,
        $variables["node"]);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function foreningsmentor_preprocess_node_add_list(&$variables) {
  // Remove types from node add list.
  unset($variables["types"]['activity']);
  unset($variables["types"]['bricky']);
  unset($variables["types"]['course']);
  unset($variables["types"]['journal_entry']);
  unset($variables["content"]["activity"]);
  unset($variables["content"]["bricky"]);
  unset($variables["content"]["course"]);
  unset($variables["content"]["journal_entry"]);
}

/**
 * Implements template_preprocess_field().
 */
function foreningsmentor_preprocess_field(&$variables, $hook) {
  if ($variables["field_name"] == 'field_contact') {
    foreach ($variables["items"][0]["content"] as &$content) {
      $ref = $content["#referenced_content"];

      $uid = $ref->get('field_user')->target_id;

      if ($uid) {
        $user = \Drupal\user\Entity\User::load($uid);

        $imageUrl = NULL;

        if (isset($user->field_profile_image->entity)) {
          $imageUrl = ImageStyle::load('profile_image')
            ->buildUrl($user->field_profile_image->entity->getFileUri());
        }

        $contact = [
          'name' => $user->get('field_name')->value ?: $user->getDisplayName(),
          'image' => $imageUrl,
          'description' => $user->get('field_public_description')->value,
          'mail' => $user->getEmail(),
          'phone' => $user->get('field_own_mobile')->value,
        ];

        $content['contact'] = $contact;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function foreningsmentor_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state->getStorage()["views_bulk_operations"]["view_id"]) &&
    ($form_state->getStorage()["views_bulk_operations"]["view_id"] == 'volunteers' ||
      $form_state->getStorage()["views_bulk_operations"]["view_id"] == 'children_view_page') &&
    $form_id == 'views_bulk_operations_confirm_action') {

    $newList = [];
    $commaSeparatedString = '';

    if (isset($form['list'])) {
      if ($form_state->getStorage()["views_bulk_operations"]["view_id"] == 'volunteers') {
        foreach ($form["list"]["#items"] as $username) {
          $user = user_load_by_name($username);
          $name = $user->get('field_name')->value ?: $user->getEmail();

          $newList[$user->getEmail()] = $name;
        }
      }
      else {
        if ($form_state->getStorage()["views_bulk_operations"]["view_id"] == 'children_view_page') {
          foreach ($form["list"]["#items"] as $child_name) {
            $query = \Drupal::entityQuery('node');
            $query->condition('type', 'child');
            $query->condition('title', $child_name);

            $p = $query->execute();

            $nodes = Node::loadMultiple($p);

            foreach ($nodes as $node) {
              $parents = $node->field_parents;

              foreach ($parents as $parent) {
                $entity = $parent->entity;

                $name = $entity->title->value;
                $email = $entity->field_email->value;

                $newList[$email] = $name;
              }
            }
          }
        }
      }

      $form["list"]["#items"] = array_keys($newList);

      $listString = '';

      $last_key = array_search(end($newList), $newList);
      foreach ($newList as $key => $object) {
        $commaSeparatedString .= $key;
        $listString = $listString . '"' . $object . '"' . '<' . $key . '>';
        if ($key != $last_key) {
          $listString .= '; ';
          $commaSeparatedString .= ",";
        }
      }

      $store = \Drupal::service('user.private_tempstore')->get('foreningsmentor');
      $store->set('copy_to_clipboard', $listString);
    }

    unset($form["actions"]["submit"]);

    $form["actions"]["cancel"]['#submit'] = ['_foreningsmentor_cancel_action'];

    $form["actions"]["copy_to_clipboard"] = [
      '#type' => 'submit',
      '#value' => \Drupal::translation()->translate('Copy to clipboard'),
      '#ajax' => [
        'callback' => '_foreningsmentor_copy_to_clipboard',
        'progress' => [
          'type' => 'throbber',
          'message' => NULL,
        ],
      ],
    ];

    $form['mailtolink']['#markup'] = '<a class="button" href="mailto:' . $commaSeparatedString . '">' . t('Mailto link for mail client') . '</a>';

    $form['#attached']['library'][] = 'foreningsmentor/copy_to_clipboard';
  }
}

/**
 * Copy to clipboard ajax function.
 *
 * @param array $form
 * @param $form_state
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function _foreningsmentor_copy_to_clipboard(
  array &$form,
  $form_state
): AjaxResponse {
  $store = \Drupal::service('user.private_tempstore')->get('foreningsmentor');

  $list = $store->get('copy_to_clipboard');
  $store->set('copy_to_clipboard', []);

  $ajax_response = new AjaxResponse();
  $ajax_response->addCommand(new \Drupal\foreningsmentor\Ajax\CopyToClipboardCommand($list));

  return $ajax_response;
}

/**
 * Cancel submit function.
 *
 * @param array $form
 * @param $form_state
 */
function _foreningsmentor_cancel_action(array &$form, $form_state) {
  $form_data = $form_state->get('views_bulk_operations');
  $form_state->setRedirectUrl($form_data['redirect_url']);
}
