<?php

/**
 * @file
 * Contains foreningsmentor_access_control.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function foreningsmentor_access_control_help(
  $route_name,
  RouteMatchInterface $route_match
) {
  switch ($route_name) {
    // Main module help for the foreningsmentor_access_control module.
    case 'help.page.foreningsmentor_access_control':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom access rules for the Foreningsmentor intranet.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_node_access_records().
 */
function foreningsmentor_access_control_node_access_records(NodeInterface $node
) {
  $grants = [];

  if ($node->getType() == 'child' ||
      $node->getType() == 'journal_entry' ||
      $node->getType() == 'course' ||
      $node->getType() == 'activity') {
    // Define a specific grant for this child using nid as grant id.
    $grants[] = [
      'realm' => 'foreningsmentor_access_control',
      'gid' => $node->id(),
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    ];

    // Define a general grant for all children using GID = 0.
    $grants[] = [
      'realm' => 'foreningsmentor_access_control',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    ];
  }

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function foreningsmentor_access_control_node_grants(
  AccountInterface $account,
  $op
) {
  $grants = &drupal_static(__FUNCTION__);
  if (!is_null($grants)) {
    return $grants;
  }

  $grants = [];

  $all_access_roles = ['coordinator'];

  if (array_intersect($all_access_roles, $account->getRoles())) {
    // For 'all access' roles we give the general '0' GID
    $grants['foreningsmentor_access_control'][] = 0;
  }
  elseif (in_array('mentor', $account->getRoles(), TRUE)) {
    // For mentors we only grant access on a 'pr. child' basis so we need to
    // find all children with the logged in user as mentor.
    // Only show children that are marked as being mentored.
    // Disable access check to avoid triggering infinite loop, since access
    // checks apply to entity queries.
    // Only give access to courses where the mentor is set.

    // Give access to courses where mentor is current user.
    $query = \Drupal::entityQuery('node')
      ->condition('status', 1)
      ->condition('type', 'course')
      ->condition('field_mentor.target_id', $account->id())
      ->accessCheck(FALSE);
    $course_ids = $query->execute();

    $child_ids = [];
    $activity_ids = [];
    $journal_entry_ids = [];

    if (is_array($course_ids) && count($course_ids) > 0) {
      // Give access to children where the course is in courses_id.
      $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('type', 'child')
        ->condition('field_courses.target_id', $course_ids, 'IN')
        ->accessCheck(FALSE);
      $child_ids = $query->execute();

      // Only give access to activities where the mentor is set.
      $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('type', 'activity')
        ->condition('field_course.target_id', $course_ids, 'IN')
        ->accessCheck(FALSE);
      $activity_ids = $query->execute();

      // Mentors should also have access to journal_entries where
      // field_only_for_coordinators is not set.
      $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('type', 'journal_entry')
        ->condition('field_course.target_id', $course_ids, 'IN')
        ->accessCheck(FALSE);
      $orCondition = $query->orConditionGroup()
        ->notExists('field_only_for_coordinators')
        ->condition('field_only_for_coordinators', 0);
      $query->condition($orCondition);
      $journal_entry_ids = $query->execute();
    }

    // Assign NID's as grant ID's
    $grants['foreningsmentor_access_control'] = array_merge($child_ids, $journal_entry_ids, $course_ids, $activity_ids);
  }

  return $grants;
}
